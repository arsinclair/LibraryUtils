stages:
    - mirror
    - prepare
    - build
    - deploy

mirror:
    stage: mirror
    tags: ["linux-docker-build"]
    image: alpine:3.13.1
    before_script:
        - apk update && apk add -q --no-cache bash git openssh
        - git config --global user.name "${GITLAB_USER_NAME}"
        - git config --global user.email "${GITLAB_USER_EMAIL}"
    script:
        - mkdir ~/.ssh
        - printf "%s\n" "${GITHUB_DEPLOY_KEY}" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
        - git clone --bare ${CI_REPOSITORY_URL}
        - cd ${CI_PROJECT_NAME}.git
        - git push --mirror git@github.com:${GITHUB_REPO}.git

prepare:
    stage: prepare
    tags: ["windows-powershell-deploy"]
    rules:
       - if: '$CI_COMMIT_BRANCH == "master"'
    script:
        - $dotnetExists = $false
        - $targetVersionExists = $false
        - try { if(Get-Command dotnet) { $dotnetExists = $true } } catch [System.Management.Automation.CommandNotFoundException] {}
        - if ($dotnetExists) { if((((dir (Get-Command dotnet).Path.Replace('dotnet.exe', 'shared\Microsoft.NETCore.App')).Name) -like '5.0*').Count -ne 0) { $targetVersionExists = $true } }
        - if (!$targetVersionExists) { wget "https://download.visualstudio.microsoft.com/download/pr/dff39ddb-b399-43c5-9af0-04875134ce04/1c449bb9ad4cf75ec616482854751069/dotnet-hosting-5.0.3-win.exe" -outfile "dotnet-setup.exe";
            $pathvargs = { .\dotnet-setup.exe /install /quiet /norestart };
            Invoke-Command -ScriptBlock $pathvargs }

build:
    stage: build
    tags: ["windows-powershell-deploy"]
    rules:
       - if: '$CI_COMMIT_BRANCH == "master"'
    script:
        - dotnet publish --configuration Release --nologo --output ./PublishOutput
        - Compress-Archive -Path "PublishOutput\*" -DestinationPath Output.zip -CompressionLevel Optimal
    artifacts:
        paths:
            - Output.zip
        expire_in: 20 minutes

deploy:
    stage: deploy
    tags: ["windows-powershell-deploy"]
    rules:
       - if: '$CI_COMMIT_BRANCH == "master"'
    before_script:
        # Cleanup
        - $existingPool = Get-IISAppPool "${CI_PROJECT_TITLE}"
        - if($existingPool) { Stop-WebAppPool "${CI_PROJECT_TITLE}" } else { New-WebAppPool -Name "${CI_PROJECT_TITLE}" -Force }
        - if (!(Test-Path -Path "${DEPLOY_PATH}")) { New-Item -ItemType directory -Path "${DEPLOY_PATH}" }
        - Get-ChildItem "${DEPLOY_PATH}" | Remove-Item -Recurse -Confirm:$false -Force
    script:
        - Expand-Archive "Output.zip" -DestinationPath "${DEPLOY_PATH}"

        - $existingApp = Get-Website -Name "${CI_PROJECT_TITLE}"
        - Start-WebAppPool "${CI_PROJECT_TITLE}"
        - if (!$existingApp) { New-Website -Name "${CI_PROJECT_TITLE}" -PhysicalPath "${DEPLOY_PATH}" -ApplicationPool "${CI_PROJECT_TITLE}" -Force }

        - Reset-IISServerManager -Confirm:$false
