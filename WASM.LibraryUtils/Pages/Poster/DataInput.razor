@using FlacLibSharp
@using System.IO
@using System.Threading

<div class="splitrow">
    <div class="col-12 p-0">
        <div class="splitcolumn">
            <form>
                <div class="dropzone @dropClass unselectable" style="text-align: center;">
                    <InputFile multiple OnChange="HandleInput" @ondragenter="HandleDragEnter"
                        @ondragleave="HandleDragLeave" />
                    <p class="dropzone-text">Upload<br></p>
                    <p class="dropzone-text" style="font-size: small;">FLAC <strike>/ mp3 files, folders, musicbrainz
                            URL</strike></p>
                </div>
                @if (isUploading)
                {
                    <div class="alert alert-info" role="alert">Uploading: @progressPercent
                        <Spinner />
                    </div>
                }
                @if (!string.IsNullOrEmpty(message))
                {
                    <div class="alert alert-danger" role="alert">
                        @message
                    </div>
                }
            </form>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Action<FlacFile> FileUploadedCallback { get; set; }

    public FlacFile file { get; set; }

    private string message = "";
    private string dropClass = "";
    private bool isUploading = false;
    private string progressPercent;
    private CancellationTokenSource cancelation;

    protected override void OnInitialized()
    {
        cancelation = new CancellationTokenSource();
    }

    private void HandleDragEnter()
    {
        dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleInput(InputFileChangeEventArgs eventArgs)
    {
        dropClass = "";
        var files = eventArgs.GetMultipleFiles(1);
        var inputFile = files.FirstOrDefault();
        if (inputFile != null)
        {
            using (var ms = new MemoryStream())
            {
                isUploading = true;
                Stream stream = inputFile.OpenReadStream(70 * 1024 * 1024, cancelation.Token); // 70MB : TODO: Copying to memory is bad, we need to copy to blog or external store
                var buffer = new byte[4 * 4096];
                int bytesRead;
                double totalRead = 0;

                while ((bytesRead = await stream.ReadAsync(buffer, cancelation.Token)) != 0)
                {
                    totalRead += bytesRead;
                    await ms.WriteAsync(buffer, cancelation.Token);
                    progressPercent = $"{totalRead / 1024 / 1024} MB / {inputFile.Size / 1024 / 1024} MB [{(totalRead / inputFile.Size) * 100}]"; // TODO: use this approach for progress tracking https://stackoverflow.com/a/62805273/6184866
                    await InvokeAsync(StateHasChanged);
                }

                ms.Position = 0;
                isUploading = false;
                stream.Close();

                try
                {
                    file = new FlacFile(ms);

                    if (file != null)
                    {
                        FileUploadedCallback(file);
                    }
                }
                catch (System.Exception ex)
                {
                    message = ex.ToString();
                }
            }
        }
    }

    public void Dispose()
    {
        cancelation.Cancel();
    }
}